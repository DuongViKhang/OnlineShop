@model OnlineShop.Models.Product
@{
    ViewData["Title"] = "Chi tiết sản phẩm";
}
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
<div class="main-wrapper">

    <!-- Begin Main Header Area -->
    <!-- Main Header Area End Here -->
    <!-- Begin Main Content Area  -->
    <main class="main-content">
        <br />
        <div class="container h-100">
            <div class="row h-100">
                <div class="col-lg-12">
                    <div class="breadcrumb-item">
                        <ul>
                            <li>
                                <a href="@Url.Action("Index", "Home")">Trang chủ <i class="pe-7s-angle-right"></i></a>
                            </li>
                            <li>Chi tiết sản phẩm</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="single-product-area section-space-top-100">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="">
                            <img class="img-full" name="productImage" id="productImage" src="~/upload/images/product/@Model.Image" alt="Product Image">
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="product-thumb-with-content row">
                            <div class="col-12 order-lg-1 order-2 pt-10 pt-lg-0">
                                <div class="single-product-content">
                                    <h2 class="title">@Model.ProductName</h2>
                                    <div class="price-box pb-1">
                                        <span class="new-price text-primary">Giá: @Model.PromotionalPrice.ToString("#,##0") VNĐ</span>
                                        <span class="old-price text-danger">@Model.Price.ToString("#,##0") VNĐ</span>
                                    </div>
                                    <div class="rating-box-wrap pb-7">
                                        <div class="rating-box">
                                            <div class="product-category text-matterhorn pb-2">
                                                <span class="title">Danh mục :</span>
                                                <ul>
                                                    <li>
                                                        <h4><a asp-controller="Product" asp-action="Index" asp-route-categoryName="@Model.Category.CategoryName">@Model.Category.CategoryName</a></h4>
                                                    </li>
                                                </ul>
                                            </div>
                                            @if(Model.Quantity > 0) {
                                                <ul>
                                                    <li>
                                                        <p style="padding-right:17px;">Tình trạng: Còn hàng</p>
                                                    </li>
                                                </ul>
                                            }
                                            else
                                            {
                                                <ul>
                                                    <li>
                                                        <p style="padding-right:17px;">Tình trạng: Hết hàng</p>
                                                    </li>
                                                </ul>
                                            }
                                            <ul>
                                                <li>
                                                    <p style="padding-right:17px;">Số lượng trong kho: @Model.Quantity</p>
                                                </li>
                                            </ul>
                                            <ul>
                                                <li>
                                                    <p style="padding-right:17px;">Đánh giá:</p>
                                                </li>
                                                @{
                                                    var i = Model.Rating;
                                                                                                                                                @while (i > 0)
                                                    {
                                                                                                                                                    <li><i class="pe-7s-star"></i></li>
                                                        i--;
                                                    }
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                    <h6>
                                        Mô tả: @Model.Decription
                                    </h6>
                                    <br />

                                    <form asp-action="OrderProduct" method="get">
                                        <ul class="quantity-with-btn pb-7">
                                            <li class="quantity" style="display:flex;">
                                                @if(ViewBag.Styles.Count > 0)
                                                {
                                                    <b style="margin-right: 20px; margin-top:6px;">Loại: </b>
                                                    <input name="styleId" id="styleIdOrder" type="hidden" value="@ViewBag.Styles[0].StyleId">
                                                    <select class="form-select" onchange="redirectToSelectedStyle(this)">
				                                        <option class="option" hidden>@ViewBag.Styles[0].StyleName</option>
				                                        @foreach (var style in ViewBag.Styles)
				                                        {
					                                        <option class="option" value="@style" 
                                                                data-styleid="@style.StyleId" data-imageurl="@style.Image">@style.StyleName</option>
				                                        }
			                                        </select>
                                                    <script>
                                                        function redirectToSelectedStyle(selectElement) {
                                                            var selectedOption = selectElement.options[selectElement.selectedIndex];
                                                            var selectedStyleId = selectedOption.getAttribute('data-styleid');
                                                            var selectedImageUrl = selectedOption.getAttribute('data-imageurl');

                                                            document.getElementById('styleIdOrder').value = selectedStyleId;
                                                            document.getElementById('styleIdCart').value = selectedStyleId;
                                                            document.getElementById('productImage').src = '/upload/images/product/' + selectedImageUrl;
                                                        }
                                                    </script>
                                                }
                                                else
                                                {
                                                    <b style="margin-right: 20px; margin-top:6px;">Loại: Mặc định</b>
                                                }
                                            </li>
                                        </ul>
                                        <ul class="quantity-with-btn pb-7">
                                            <li class="quantity" style="display:inline">
                                                <input name="productId" id="productId" type="hidden" value="@Model.ProductId">
                                                <div class="cart-plus-minus" style="width: 170px; text-align:center;">
                                                    <input name="quantity" id="quantity" class="cart-plus-minus-box" value="1" type="text">
                                                </div>
                                            </li>
                                        </ul>
                                        <ul class="quantity-with-btn pb-7">
                                            <li class="add-to-cart">
                                                <button class="btn btn-custom-size lg-size btn-danger btn-secondary-hover rounded-0" type="submit">Mua</button>
                                            </li>
                                        </ul>
                                    </form>

                                    <ul class="quantity-with-btn pb-7">
                                        <li class="add-to-cart">
                                            <form asp-controller="ShoppingCart" asp-action="AddToCart" id="addToCart" method="post">
                                                <input name="productId" value="@Model.ProductId" type="hidden" />
                                                <input name="count" id="count" value="" type="hidden" />
                                                @if(ViewBag.Styles.Count > 0)
                                                {
                                                    <input name="styleId" id="styleIdCart" type="hidden" value="@ViewBag.Styles[0].StyleId">
                                                }
                                                <button class="btn btn-custom-size lg-size btn-primary btn-secondary-hover rounded-0" type="submit">Thêm vào giỏ hàng</button>
                                            </form>
                                        </li>
                                    </ul>
                                    <input id="sellerId" value="@Model.SellerId" type="hidden" />
                                    <input id="userId" value="@HttpContextAccessor.HttpContext.Session.GetString("userId")" type="hidden" />
                                    @* <button id="btnChatSeller" onclick="toggleFab()" class="btn btn-custom-size lg-size btn-info btn-secondary-hover rounded-0" style="width:auto;">Chat với người bán</button> *@



                                    @section scripts {

                                        <script>
                                            $('.cart-plus-minus').append(
                                                '<div class="dec qtybutton"><i class="fa fa-minus"></i></div><div class="inc qtybutton"><i class="fa fa-plus"></i></div>'
                                            );
                                            $('.qtybutton').on('click', function () {
                                                var $button = $(this);
                                                var oldValue = $button.parent().find('input').val();
                                                if ($button.hasClass('inc')) {
                                                    var newVal = parseFloat(oldValue) + 1;
                                                } else {
                                                    // Don't allow decrementing below zero
                                                    if (oldValue > 1) {
                                                        var newVal = parseFloat(oldValue) - 1;
                                                    } else {
                                                        newVal = 1;
                                                    }
                                                }
                                                $button.parent().find('input').val(newVal);
                                            });
                                            document.addEventListener('DOMContentLoaded', function () {
                                                var quantityInput = document.getElementById('quantity');
                                                var countInput = document.getElementById('count');
                                                var addToCartForm = document.getElementById('addToCart');

                                                addToCartForm.addEventListener('submit', function () {
                                                    countInput.value = quantityInput.value;
                                                });
                                            });

                                            document.getElementById('imageInput').addEventListener('change', function (event) {
                                                // Lấy ra danh sách các tệp đã chọn
                                                var files = event.target.files;
    
                                                // Kiểm tra xem người dùng đã chọn tệp nào chưa
                                                if (files.length > 0) {
                                                    var selectedFile = files[0];
                                                        var reader = new FileReader();
                                                        reader.onload = function (e) {
                                                            var imageUrl = e.target.result;
                                                            // Tạo một phần tử img và thiết lập src để hiển thị ảnh
                                                        document.getElementById("imagePreviewContainer").style = "display";
                                                            var imagePre = document.getElementById("imagePreview");
                                                            imagePre.src = imageUrl;
                                                        imagePre.style = "margin:10px;border-radius:5px; max-height:80px; max-width: 80px; margin-top:-5px;";
                                                        };
                                                        reader.readAsDataURL(selectedFile); // Đọc dữ liệu ảnh và chuyển đổi thành URL
                                                    
                                                } else {
                                                    console.log("No file selected.");
                                                }
                                            });
                                            function removeImageSelected(){
                                                document.getElementById("imagePreviewContainer").style = "display:none";
                                                document.getElementById('imageInput').value = '';
                                                // Xóa nội dung của div hiển thị ảnh
                                                event.target.innerHTML = '';
                                                var imagePre = document.getElementById("imagePreview");
                                                imagePre.style = "display:none";
                                            }

                                        </script>
                                        <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
                                        <script src="http://code.jquery.com/jquery-1.11.3.min.js"></script>
                                        <script>
                                            var connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();

                                            connection.start().then(function () {
                                                
                                                console.log("SignalR connected");
                                            }).catch(function (err) {
                                                return console.error(err.toString());
                                            });
                                            connection.on("IncomingCall", () => {
                                                openModal();
                                                console.log("co cuoc goi")
                                            });
                                            // Xử lý tín hiệu khi cuộc gọi kết thúc
                                            connection.on("CallEnded", () => {
                                                endCall();
                                            });
                                            document.addEventListener("DOMContentLoaded", function () {
                                                getSessionValue("userId", function (sessionValue) {
                                                    if (!sessionValue) {
                                                        var divToHide = document.getElementById("myChatBox");

                                                        // Ẩn div bằng cách đặt style.display thành "none"
                                                        divToHide.style.display = "none";
                                                    } else {
                                                        getMessageFromFirebase(sessionValue, document.getElementById("sellerId").value);
                                                    }
                                                });
                                            });

                                            function sendMessage() {
                                                
                                                var sellerId = document.getElementById("sellerId").value;
                                                var message = document.getElementById("messageChatInput").value;
                                                const fileInput = document.getElementById("imageInput");
                                                const file = fileInput ? fileInput.files[0]:null;

                                              
                                                getSessionValue("userId", function (senderId) {
                                                    if (sellerId && senderId) {
                                                        if (message) {
                                                            displayMessage("You", message);
                                                            pushMessageToFirebase(senderId, sellerId, message, senderId);
                                                            connection.invoke("SendMessageToUser", sellerId, senderId, message).catch(function (err) {
                                                                console.error(err.toString());
                                                            });
                                                        }
                                                        if (file) {
                                                            const reader = new FileReader();
                                                            const loadImageData = (file) => {
                                                                return new Promise((resolve, reject) => {
                                                                    reader.onload = () => {
                                                                        resolve(reader.result);
                                                                    };
                                                                    reader.onerror = reject;
                                                                    reader.readAsDataURL(file);
                                                                });
                                                            };
                                                            loadImageData(file)
                                                                .then((imageData) => {
                                                                    displayMessage("You", imageData);
                                                                    pushMessageToFirebase(senderId, sellerId, imageData, senderId);
                                                                    // Gửi dữ liệu hình ảnh lên server
                                                                    connection.invoke("SendImage", sellerId, senderId, imageData)
                                                                        .catch((err) => {
                                                                            console.error(err.toString());
                                                                        });
                                                                    removeImageSelected();
                                                                })
                                                                .catch((err) => {
                                                                    console.error(err.toString());
                                                                });
                                                            fileInput.value = null;
                                                        }
                                                    }
                                                   
                                                });
                                            }
                                            connection.on("ReceiveImage", function (senderId,imageData) {
                                                // Xử lý hình ảnh nhận được từ server
                                                // Ví dụ: Hiển thị hình ảnh trong một thẻ <img>
                                                addChat(imageData);
                                                
                                            });
                                            function pushMessageToFirebase(userId, sellerId, message, senderId) {
                                                $.ajax({
                                                    url: '/api/Firebase/SetMessage',
                                                    type: 'POST',
                                                    contentType: 'application/json',
                                                    data: JSON.stringify({
                                                        userId: userId,
                                                        sellerId: sellerId,
                                                        message: message,
                                                        senderId: senderId
                                                    }),
                                                    success: function (response) {
                                                 
                                                        console.log(response); // Log response from server
                                                        // Handle success
                                                    },
                                                    error: function (xhr, status, error) {
                                                        console.error('Error:', error); // Log error
                                                        // Handle error
                                                    }
                                                });
                                            }

                                            function getMessageFromFirebase(userId, sellerId) {
                                                $.ajax({
                                                    url: '/api/Firebase/GetMessages',
                                                    type: 'GET',
                                                    data: {
                                                        userId: userId,
                                                        sellerId: sellerId
                                                    },
                                                    success: function (data) {
                                                        // Lặp qua các khóa trong đối tượng data
                                                        Object.values(data).forEach(function (mess) {
                                                            var messageObj = JSON.parse(mess);

                                                        });
                                                        getSessionValue("userId", function (sessionValue) {
                                                            if (sessionValue) {
                                                                // Lặp qua các khóa trong đối tượng data
                                                                Object.values(data).forEach(function (mess) {
                                                                    var messageObj = JSON.parse(mess);
                                                                    if (sessionValue) {
                                                                        if (sessionValue == messageObj.senderId) {
                                                                            initChat(messageObj.content, true, messageObj.timeSend);
                                                                        }
                                                                        else {
                                                                            initChat(messageObj.content, false, messageObj.timeSend);
                                                                        }
                                                                        document.getElementById("chat_fullscreen").scrollTop = document.getElementById("chat_fullscreen").scrollHeight;
                                                                    }
                                                                });
                                                            }
                                                        });
                                                        

                                                    },
                                                    error: function (xhr, status, error) {
                                                        console.error('Error:', error);
                                                    }
                                                });
                                            }
                                            function displayMessage(sender, message) {
                                                var chatFull = document.getElementById("chat_fullscreen");
                                                var chatMsgItem = document.createElement("span");
                                                chatMsgItem.className = "chat_msg_item chat_msg_item_user";
                                                if (isBase64(message)) {
                                                    // Thêm img vào chatMsgItem
                                                    var messageImg = document.createElement('img');
                                                    messageImg.src = message; // Đặt URL của hình ảnh tại đây
                                                    messageImg.style.maxWidth = "100px"; // Cài đặt chiều rộng tối đa của hình ảnh
                                                    messageImg.style.marginTop = '10px'; // Tạo khoảng trống giữa nội dung tin nhắn và hình ảnh

                                                    chatMsgItem.appendChild(messageImg);
                                                } else {
                                                    chatMsgItem.innerHTML = message;
                                                }
                                                
                                                chatFull.appendChild(chatMsgItem);
                                                // Thời gian trước đó
                                                var previousTime = new Date();
                                                previousTime.setMinutes(previousTime.getMinutes()); // Giả sử 10 phút trước

                                                // Tính thời gian đã trôi qua
                                                var timeElapsed = calculateTimeElapsed(previousTime);

                                                chatFull.innerHTML += '<div class="status2" style=" right: 0px; top:20px; position:relative ;font - size: 11px; opacity: 0.3;">' + timeElapsed + ' phút trước' + '</div>';
                                            }
                                            function initChat(message, user, time) {
                                                var chatFull = document.getElementById("chat_fullscreen");

                                                if (user) {
                                                    // Tạo phần tử chat_msg_item_user
                                                    var chatMsgItem = document.createElement("span");
                                                    chatMsgItem.className = "chat_msg_item chat_msg_item_user";

                                                   
                                                    if (isBase64(message)) {
                                                        // Thêm img vào chatMsgItem
                                                        var messageImg = document.createElement('img');
                                                        messageImg.src = message; // Đặt URL của hình ảnh tại đây
                                                        messageImg.style.maxWidth = "100px"; // Cài đặt chiều rộng tối đa của hình ảnh
                                                        messageImg.style.marginTop = '10px'; // Tạo khoảng trống giữa nội dung tin nhắn và hình ảnh

                                                        chatMsgItem.appendChild(messageImg);
                                                    } else {
                                                        // Thêm nội dung tin nhắn
                                                        chatMsgItem.textContent = message;
                                                    }
                                                    // Thêm chatMsgItem vào chatFull
                                                    chatFull.appendChild(chatMsgItem);

                                                    
                                                } else {
                                                    var avatarSrc = "/AdminAssets/img/avatars/avatar.jpg";

                                                    // Tạo phần tử chat_msg_item_admin
                                                    var chatMsgItem = document.createElement("span");
                                                    chatMsgItem.className = "chat_msg_item chat_msg_item_admin";

                                                    // Tạo phần tử chat_avatar
                                                    var chatAvatar = document.createElement("div");
                                                    chatAvatar.className = "chat_avatar";

                                                    // Tạo phần tử img
                                                    var img = document.createElement("img");
                                          
                                                    img.src = avatarSrc;
                                                    img.style.cssText = "border-radius:5px; max-height:50px; max-width:50px;";

                                                    // Thêm img vào chat_avatar
                                                    chatAvatar.appendChild(img);

                                                    // Thêm chat_avatar vào chatMsgItem
                                                    chatMsgItem.appendChild(chatAvatar);

                                                    
                                                    if (isBase64(message)) {
                                                        // Thêm img vào chatMsgItem
                                                        var messageImg = document.createElement('img');
                                                        messageImg.src = message; // Đặt URL của hình ảnh tại đây
                                                        messageImg.style.maxWidth = '100px'; // Cài đặt chiều rộng tối đa của hình ảnh
                                                        messageImg.style.marginTop = '10px'; // Tạo khoảng trống giữa nội dung tin nhắn và hình ảnh

                                                        chatMsgItem.appendChild(messageImg);
                                                    } else {
                                                        // Thêm nội dung tin nhắn
                                                        chatMsgItem.innerHTML += message;
                                                    }
                                                    // Thêm chatMsgItem vào chatFull
                                                    chatFull.appendChild(chatMsgItem);

                                             
                                                }
                                            }

                                            function addChat(message) {
                                                var chatFull = document.getElementById("chat_fullscreen");
                                                var avatarSrc = "/AdminAssets/img/avatars/avatar.jpg";

                                                // Thời gian trước đó
                                                var previousTime = new Date();
                                                previousTime.setMinutes(previousTime.getMinutes()); // Giả sử 10 phút trước

                                                // Tính thời gian đã trôi qua
                                                var timeElapsed = calculateTimeElapsed(previousTime);

                                                // Tạo phần tử chat_msg_item_admin
                                                var chatMsgItem = document.createElement('span');
                                                chatMsgItem.classList.add('chat_msg_item', 'chat_msg_item_admin');

                                                // Tạo phần tử chat_avatar
                                                var chatAvatar = document.createElement('div');
                                                chatAvatar.classList.add('chat_avatar');
                                                var img = document.createElement('img');
                                                img.src = avatarSrc;
                                                img.style.borderRadius = '5px';
                                                img.style.maxHeight = '50px';
                                                img.style.maxWidth = '50px';
                                                chatAvatar.appendChild(img);

                                                // Thêm chat_avatar vào chat_msg_item
                                                chatMsgItem.appendChild(chatAvatar);
                                                if (isBase64(message)) {
                                                    // Thêm img vào chatMsgItem
                                                    var messageImg = document.createElement('img');
                                                    messageImg.src = message; // Đặt URL của hình ảnh tại đây
                                                    messageImg.style.maxWidth = '100%'; // Cài đặt chiều rộng tối đa của hình ảnh
                                                    messageImg.style.marginTop = '10px'; // Tạo khoảng trống giữa nội dung tin nhắn và hình ảnh

                                                    chatMsgItem.appendChild(messageImg);
                                                } else {
                                                    // Thêm nội dung tin nhắn
                                                    var messageNode = document.createTextNode(message);
                                                    chatMsgItem.appendChild(messageNode);
                                                }


                                              


                                                // Thêm chatMsgItem vào chatFull
                                                chatFull.appendChild(chatMsgItem);
                                            }
                                            connection.on("ReceiveMessage", function (senderId, message) {
                                                addChat(message);
                                            });

                                            function calculateTimeElapsed(previousTime) {
                                                var currentTime = new Date();
                                                var elapsedTime = currentTime - previousTime;

                                                // Chuyển thời gian thành phút
                                                var minutesElapsed = Math.floor(elapsedTime / (1000 * 60));

                                                return minutesElapsed;
                                            }

                                            function getSessionValue(key, callback) {
                                                $.ajax({
                                                    url: '/Customer/GetSessionValue?key=' + key,
                                                    type: 'GET',
                                                    success: function (data) {
                                                        // Gọi hàm callback và truyền dữ liệu session vào đó
                                                        callback(data);
                                                    },
                                                    error: function (xhr, status, error) {
                                                        console.error('Error:', error);
                                                    }
                                                });
                                            }

                                            function getSelletInfo(key, callback) {
                                                var productId = document.getElementById("productId").value;
                                                // Tạo một request AJAX
                                                $.ajax({
                                                    url: '/Customer/GetSellerInfo', // Địa chỉ URL của controller và action
                                                    type: 'GET', // Phương thức GET
                                                    data: { productId: productId }, // Dữ liệu gửi đi, productId là tên tham số và productId là giá trị
                                                    success: function (data) { // Hàm được gọi khi request thành công
                                                        callback(data); // Hiển thị dữ liệu nhận được từ server trong console
                                                    },
                                                    error: function (xhr, status, error) { // Hàm được gọi khi có lỗi xảy ra
                                                        console.error(xhr.responseText); // Hiển thị thông báo lỗi trong console
                                                    }
                                                });
                                            }
                                           
                                            //ChatBox
                                            hideChat(4);

                                            $('#prime').click(function () {
                                                toggleFab();
                                            });


                                            //Toggle chat and links
                                            function toggleFab() {
                                                $('.prime').toggleClass('zmdi-comment-outline');
                                                $('.prime').toggleClass('zmdi-close');
                                                $('.prime').toggleClass('is-active');
                                                $('.prime').toggleClass('is-visible');
                                                $('#prime').toggleClass('is-float');
                                                $('.chat').toggleClass('is-visible');
                                                $('.fab').toggleClass('is-visible');

                                            }



                                            $('#chat_fullscreen_loader').click(function (e) {
                                                $('.fullscreen').toggleClass('zmdi-window-maximize');
                                                $('.fullscreen').toggleClass('zmdi-window-restore');
                                                $('.chat').toggleClass('chat_fullscreen');
                                                $('.fab').toggleClass('is-hide');
                                                $('.header_img').toggleClass('change_img');
                                                $('.img_container').toggleClass('change_img');
                                                $('.chat_header').toggleClass('chat_header2');
                                                $('.fab_field').toggleClass('fab_field2');
                                                $('.chat_converse').toggleClass('chat_converse2');
                                                //$('#chat_converse').css('display', 'none');
                                                // $('#chat_body').css('display', 'none');
                                                // $('#chat_form').css('display', 'none');
                                                // $('.chat_login').css('display', 'none');
                                                // $('#chat_fullscreen').css('display', 'block');
                                            });

                                            function hideChat(hide) {
                                                switch (hide) {
                                                    case 0:
                                                        $('#chat_converse').css('display', 'none');
                                                        $('#chat_body').css('display', 'none');
                                                        $('#chat_form').css('display', 'none');
                                                        $('.chat_login').css('display', 'block');
                                                        $('.chat_fullscreen_loader').css('display', 'none');
                                                        $('#chat_fullscreen').css('display', 'none');
                                                        break;
                                                    case 1:
                                                        $('#chat_converse').css('display', 'block');
                                                        $('#chat_body').css('display', 'none');
                                                        $('#chat_form').css('display', 'none');
                                                        $('.chat_login').css('display', 'none');
                                                        $('.chat_fullscreen_loader').css('display', 'block');
                                                        break;
                                                    case 2:
                                                        $('#chat_converse').css('display', 'none');
                                                        $('#chat_body').css('display', 'block');
                                                        $('#chat_form').css('display', 'none');
                                                        $('.chat_login').css('display', 'none');
                                                        $('.chat_fullscreen_loader').css('display', 'block');
                                                        break;
                                                    case 3:
                                                        $('#chat_converse').css('display', 'none');
                                                        $('#chat_body').css('display', 'none');
                                                        $('#chat_form').css('display', 'block');
                                                        $('.chat_login').css('display', 'none');
                                                        $('.chat_fullscreen_loader').css('display', 'block');
                                                        break;
                                                    case 4:
                                                        $('#chat_converse').css('display', 'none');
                                                        $('#chat_body').css('display', 'none');
                                                        $('#chat_form').css('display', 'none');
                                                        $('.chat_login').css('display', 'none');
                                                        $('.chat_fullscreen_loader').css('display', 'block');
                                                        $('#chat_fullscreen').css('display', 'block');
                                                        break;
                                                }
                                            }
                                            function isBase64(str) {
                                                return str.includes("data:image/jpeg;base64");
                                            }
                                        </script>

                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    @if (ViewBag.mess != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" id="myAlert" role="alert" style="text-align:center;position:relative">
                            <strong>@ViewBag.mess!</strong> Số lượng sản phẩm đã chọn vượt quá số lượng còn lại trong kho
                        </div>
                    }
                </div>
            </div>
        </div>
    </main>
    <!-- Main Content Area End Here  -->
    <!-- Begin Scroll To Top -->
   
   <div style="margin:30px">
        <h5 style="margin:10px">Đánh giá của khách hàng</h5>
       
        <div id="newCommentFormContainer">
            @if (ViewBag.flagComment)
            {
                <form id="newCommentForm" style="flex-direction:row" asp-action="CreateComment" asp-controller="Product">
                    <!-- Nội dung bình luận -->
                    <div style="display: flex; align-items: center; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f5f5f5;">
                        <!-- Không có trường avatar hoặc username -->
                        <div style="width: 100%;">
                            <textarea id="content" name="content" placeholder="Nhập nội dung ... " style="width: 100%; height: 60px; border-radius: 5px; padding: 5px; margin-bottom: 5px;" required></textarea>
                            <!-- Trường đánh giá bằng ngôi sao -->
                            <div id="ratingStars" style="display: flex; align-items: center;">
                                <label for="rating" style="font-size: 16px; color: #999;">Rating:</label>
                                <div id="starContainer" style="margin-left: 5px;">
                                    <!-- Sử dụng biểu tượng ngôi sao -->
                                    <span class="star" data-value="1"><i class="pe-7s-star"></i></span>
                                    <span class="star" data-value="2"><i class="pe-7s-star"></i></span>
                                    <span class="star" data-value="3"><i class="pe-7s-star"></i></span>
                                    <span class="star" data-value="4"><i class="pe-7s-star"></i></span>
                                    <span class="star" data-value="5"><i class="pe-7s-star"></i></span>
                                </div>
                                <input type="hidden" id="rating" name="rating" value="0">
                            </div>
                        </div>
                        <input type="hidden" id="userId" name="userId" value="@HttpContextAccessor.HttpContext.Session.GetString("userId")" />
                        <input type="hidden" id="productId" name="productId" value="@Model.ProductId" />
                    </div>
                    <!-- Nút submit để gửi bình luận -->
                    <button type="submit" class="btn btn-outline-warning" style="">Gửi đánh giá</button>
                </form>

            }         
        </div>

        <div id="commentsContainer">
            <div class="comment">
                <div style="display: flex; align-items: center; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f5f5f5;">
                    <p id="comAlert">Chưa có đánh giá</p>
                    <div style="margin-right: 10px;">
                       
                    </div>
                    <div>
                        
                    </div>
                </div>
            </div>
            <!-- Thêm các phần tử bình luận tương tự ở đây -->
        </div>

        <div id="paginationContainer">
            <!-- Các liên kết phân trang sẽ được thêm vào đây -->
        </div>
   </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const starContainer = document.getElementById('starContainer');
            const stars = starContainer.querySelectorAll('.star');
            const ratingInput = document.getElementById('rating');

            stars.forEach(function (star) {
                star.addEventListener('click', function () {
                    // Lấy giá trị ngôi sao được click
                    const rating = parseInt(star.getAttribute('data-value'));

                    // Cập nhật giá trị đánh giá
                    ratingInput.value = rating;

                    // Đặt lại màu sắc cho tất cả các ngôi sao
                    stars.forEach(function (s) {
                        const starValue = parseInt(s.getAttribute('data-value'));
                        if (starValue <= rating) {
                            // Nếu ngôi sao có giá trị nhỏ hơn hoặc bằng giá trị được chọn, đổi màu vàng
                            s.style.color = '#ff9800';
                        } else {
                            // Nếu ngôi sao có giá trị lớn hơn, đổi lại màu mặc định
                            s.style.color = '#ccc';
                        }
                    });
                });
            });
        });
        function getDanhGia(callback) {
            $.ajax({
                url: '/Product/getAllCommnentByProductId',
                type: 'GET',
                data: {
                    id: document.getElementById('productId').value // Thay thế yourProductId bằng giá trị thực của id bạn muốn truy vấn
                },
                success: function (response) {
                    callback(Object.values(response));

                },
                error: function (xhr, status, error) {
                    // Xử lý khi có lỗi xảy ra trong quá trình request
                    console.error('Request failed. Status:', status);
                }
            });
        }
        function getUserInfo(userId, callback=null) {
            $.ajax({
                url: '/Customer/GetUserInfo',
                type: 'GET',
                data: {
                    userId: userId // Thay thế yourProductId bằng giá trị thực của id bạn muốn truy vấn
                },
                success: function (response) {
                    if (callback != null) {
                        callback(response);
                    }
                },
                error: function (xhr, status, error) {
                    // Xử lý khi có lỗi xảy ra trong quá trình request
                    console.error('Request failed. Status:', status);
                }
            });
        }
        function checkRoleComment(userId) {
            $.ajax({
                url: '/ControllerName/CheckRoleComment',
                type: 'GET',
                data: { userId: userId },
                success: function (response) {
                    // Xử lý dữ liệu trả về khi request thành công
                    console.log('User has permission to comment.');
                },
                error: function (xhr, status, error) {
                    // Xử lý khi có lỗi xảy ra trong quá trình request
                    console.error('Failed to check role for commenting. Status:', status);
                }
            });
        }
        // Số bình luận hiển thị trên mỗi trang
        const commentsPerPage = 3;
        let currentPage = 1;
        // Sử dụng hàm getDanhGia với một callback function
        getDanhGia(function (comments) {
            // Thiết lập biến toàn cục
            
           
            const totalComments = comments.length;
            if(totalComments>0){
                document.getElementById('comAlert').style='display:none'
            }
           
            // Số trang tính được
            const totalPages = Math.ceil(totalComments / commentsPerPage);

            // Đối tượng phân trang
            const paginationContainer = document.getElementById('paginationContainer');
            paginationContainer.className = 'page-item';
            paginationContainer.style = "display: flex;flex-direction: row;margin-top:20px"
            // Nút Previous
            const prevButton = document.createElement('a');
            prevButton.href = '#';
            prevButton.className = 'page-link';
            prevButton.textContent = 'Previous';
            prevButton.addEventListener('click', function () {
                showPreviousPage();
            });
            paginationContainer.appendChild(prevButton);

            // Tính số trang hiển thị tối đa
            const maxVisiblePages = totalComments > 5 ? 5 : totalComments; // Số trang tối đa hiển thị trên thanh phân trang
            const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            // Tạo các liên kết phân trang cho các trang hiển thị
            for (let i = startPage; i <= endPage; i++) {
                const pageItem = document.createElement('span');
                pageItem.className = 'page-item';

                const pageLink = document.createElement('a');
                pageLink.href = '#';
                pageLink.className = 'page-link';
                pageLink.textContent = i;

                pageLink.addEventListener('click', function () {
                    var item = document.getElementsByClassName('page-item active');
                    if (item != null) {
                        document.getElementsByClassName('page-item active')[0].className = 'page-item';
                    }
                    pageItem.className = 'page-item active';
                    showComments(i);
                });
                pageItem.appendChild(pageLink);
                paginationContainer.appendChild(pageItem);
            }

            // Nút Next
            const nextButton = document.createElement('a');
            nextButton.href = '#';
            nextButton.className = 'page-link';
            nextButton.textContent = 'Next';
            nextButton.addEventListener('click', function () {
                showNextPage();
            });
            paginationContainer.appendChild(nextButton);

            // Hiển thị các bình luận cho trang đầu tiên khi trang được tải
            showComments(currentPage, comments);
  
            
        });
       
        // Hàm để tạo các nút phân trang
       
        // Hàm để hiển thị trang trước đó
        function showPreviousPage() {
            if (currentPage > 1) {
                currentPage--;
                showComments(currentPage);
            }
        }

        // Hàm để hiển thị trang kế tiếp
        function showNextPage() {
            if (currentPage < totalPages) {
                currentPage++;
                showComments(currentPage);
            }
        }

       

       

       
        // Hàm hiển thị các bình luận cho một trang cụ thể
        function showComments(page, comments) {
            const commentsContainer = document.getElementById('commentsContainer');
            
            // Xóa các bình luận hiện tại
            commentsContainer.innerHTML = '';

            // Tính chỉ số bắt đầu và kết thúc của các bình luận trên trang hiện tại
            const startIndex = (page - 1) * commentsPerPage;
            const endIndex = startIndex + commentsPerPage;
           
            // Lặp qua các bình luận trên trang hiện tại và hiển thị chúng
            for (let i = startIndex; i < endIndex; i++) {
                // Kiểm tra xem vị trí bình luận có hợp lệ hay không
                if (i < Object.keys(comments).length) {
                    // Tạo phần tử bình luận sử dụng hàm createCommentElement
                    const commentElement = createCommentElement(comments[i]);
                    // Thêm phần tử bình luận vào commentsContainer
                    commentsContainer.appendChild(commentElement);
                }
            }
        }
        function createCommentElement(comment) {
            // Tổng số bình luận

            // Tạo phần tử bình luận chính
            const commentElement = document.createElement('div');
            commentElement.className = 'comment';

            // Tạo phần tử chứa bình luận
            const commentContainer = document.createElement('div');
            commentContainer.style.display = 'flex';
            commentContainer.style.alignItems = 'center';
            commentContainer.style.padding = '10px';
            commentContainer.style.border = '1px solid #ccc';
            commentContainer.style.borderRadius = '5px';
            commentContainer.style.backgroundColor = '#f5f5f5';
            commentContainer.style.marginTop = '10px';

            // Tạo phần tử chứa avatar
            const avatarContainer = document.createElement('div');
            avatarContainer.style.marginRight = '30px';

            // Tạo phần tử tên người dùng
            const userName = document.createElement('p');
            userName.style.fontSize = '16px';
            userName.style.fontWeight = 'bold';
            userName.style.marginBottom = '5px';

            getUserInfo(comment.userId, function (user){
                
                // Tạo phần tử avatar (img)
                const avatar = document.createElement('img');
                avatar.src = '/upload/images/avatars/customer/' + user.avatar;
                avatar.alt = 'Avatar';
                avatar.style.width = '50px';
                avatar.style.height = '50px';
                avatar.style.borderRadius = '50%';


                // Tạo phần tử tên người dùng
                userName.textContent = user.userName;

                // Thêm avatar vào container
                avatarContainer.appendChild(avatar);
            })
           

            // Tạo phần tử chứa nội dung bình luận
            const contentContainer = document.createElement('div');
           
            

            // Tạo phần tử nội dung bình luận
            const content = document.createElement('p');
            content.style.fontSize = '14px';
            content.style.color = '#555';
            content.textContent = comment.content;

            // Tạo phần tử đánh giá
            const ratingContainer = document.createElement('div');
            ratingContainer.style.display = 'flex';
            ratingContainer.style.alignItems = 'center';

            const ratingLabel = document.createElement('span');
            ratingLabel.style.fontSize = '12px';
            ratingLabel.style.color = '#999';
            ratingLabel.textContent = 'Đánh giá:';

            const rating = document.createElement('span');
            rating.style.marginLeft = '5px';
            rating.style.fontSize = '14px';
            rating.style.color = '#ff9800';
            rating.textContent = comment.rate + ' sao';

            // Thêm các phần tử đánh giá vào container
            ratingContainer.appendChild(ratingLabel);
            ratingContainer.appendChild(rating);

            // Thêm các phần tử vào contentContainer
            contentContainer.appendChild(userName);
            contentContainer.appendChild(content);
            contentContainer.appendChild(ratingContainer);

            // Thêm avatarContainer và contentContainer vào commentContainer
            commentContainer.appendChild(avatarContainer);
            commentContainer.appendChild(contentContainer);

            // Thêm commentContainer vào commentElement
            commentElement.appendChild(commentContainer);

            // Trả về phần tử bình luận
            return commentElement;
        }

    </script>
    <script src="https://cdn.jsdelivr.net/npm/peerjs@1.3.2/dist/peerjs.min.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();


    </script>
    <script>
        // Mở modal
        function openModal(call=false) {
            var modal = document.getElementById("myModal");
            modal.style.display = "block";
            if (call == true) {
                startCall();
            }
          
        }

        // Đóng modal
        function closeModal() {
            var modal = document.getElementById("myModal");
            modal.style.display = "none";
            // Dừng luồng phương tiện khi đóng modal
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
            }
        }



        // Tạo hàm để tạo nút "Xác nhận" và "Hủy bỏ"
        function createButtons(confirmAction, cancelAction) {
            // Tạo div chứa các nút
            var buttonsContainer = document.createElement("div");
            buttonsContainer.className = "modal-buttons";

            // Tạo nút "Xác nhận"
            var confirmButton = document.createElement("button");
            confirmButton.id = "confirm-btn";
            confirmButton.className = "btn btn-primary";
            confirmButton.textContent = "Xác Nhận";
            confirmButton.onclick = function () {
                confirmAction();
            };

            // Tạo nút "Hủy bỏ"
            var cancelButton = document.createElement("button");
            cancelButton.id = "cancel-btn";
            cancelButton.className = "btn btn-danger";
            cancelButton.textContent = "Hủy Bỏ";
            cancelButton.onclick = function () {
                cancelAction();
            };

            // Thêm nút vào container
            buttonsContainer.appendChild(confirmButton);
            buttonsContainer.appendChild(cancelButton);

            // Lấy modal và thêm nút vào cuối modal
            var modal = document.getElementById("myModal");
            modal.querySelector(".modal-content").appendChild(buttonsContainer);
        }


    </script>
    <script>
        
        const peer = new Peer();
        let localStream;
        let globalCall;
        var userId = document.getElementById('userId').value;
        // Hiển thị peer ID của người dùng
        peer.on('open', function (id) {
            if (userId != null) {
                setPeerId(userId, id);
            }

        });
        // Xử lý sự kiện nhấn nút Call
        function startCall() {
            var callId = document.getElementById('sellerId').value;
            // Lấy stream từ camera và microphone của người dùng
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(function (stream) {
                    localStream = stream;
                    var localVideo = document.getElementById('localVideo');
                    localVideo.srcObject = localStream;
                    localVideo.onloadedmetadata = function () {
                        // Kiểm tra xem video có stream hay không
                        if (!localVideo.paused && !localVideo.ended) {
                            localVideo.classList.add('local-video-border'); // Thêm viền màu đỏ
                        }
                    };
                    getPeerId(callId, function (peerId) {
                        console.log(peerId);
                        // Bắt đầu cuộc gọi
                        globalCall = peer.call(peerId, localStream);
                        notifyIncomingCall(callId, userId);
                        document.getElementById('endCall').style = "display:block"
                        globalCall.on('stream', function (remoteStream) {
                            document.getElementById('remoteVideo').srcObject = remoteStream;
                        });
                        globalCall.on('close', function () {
                            console.log('Close call');
                            endCall();
                        });
                    });
                })
                .catch(function (err) {
                    console.error('Error accessing media devices:', err);
                });
        }


        // Xử lý sự kiện nhấn nút End Call
        function endCall(sendClose = false) {

            if (sendClose == true) {
                closeCallToUser(document.getElementById('sellerId').value)
            }
            if (globalCall) {
                globalCall.close();
            }

            // Tắt video local và remote
            if (localStream) {
                localStream.getTracks().forEach(function (track) {
                    track.stop();
                });
                localStream = null;
                document.getElementById('localVideo').srcObject = null;
            }
            document.getElementById('remoteVideo').srcObject = null;
            closeModal();
        }

        // Xử lý sự kiện cuộc gọi đến
        peer.on('call', function (incomingCall) {
            document.getElementById('endCall').style = "display:none";
            function confirmAction() {
                removeButtons();
                navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                    .then(function (stream) {
                        localStream = stream;
                        var localVideo = document.getElementById('localVideo');
                        localVideo.srcObject = localStream;
                        localVideo.classList.add('local-video-border');
                        document.getElementById('endCall').style = "display:block"
                        incomingCall.answer(localStream);
                        incomingCall.on('stream', function (remoteStream) {
                            let remoteVideo = document.getElementById('remoteVideo');
                            let checkTimeout;
                            remoteVideo.srcObject = remoteStream;
                        });
                        incomingCall.on('close', function () {
                            endCall();
                        });
                        // Gán incomingCall cho globalIncomingCall
                        globalCall = incomingCall;
                    })
                    .catch(function (err) {
                        console.error('Error accessing media devices:', err);
                    });
            }

            // Hàm xử lý khi nhấn nút "Hủy bỏ"
            function cancelAction() {
                // Từ chối cuộc gọi
                incomingCall.close();
                endCall(true);
                removeButtons();
            }

            createButtons(confirmAction, cancelAction);
        });

        // Hàm để xóa phần tử div có class là 'modal-buttons'
        function removeButtons() {
            // Lấy phần tử div có class là 'modal-buttons'
            var buttonsContainer = document.querySelector(".modal-buttons");

            // Kiểm tra xem phần tử tồn tại không
            if (buttonsContainer) {
                // Xóa phần tử
                buttonsContainer.remove();
            }
        }
        function setPeerId(userId, peerId) {
            // Gọi API bằng Ajax
            $.ajax({
                url: '/api/Firebase/SetPeerId',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    userId: userId,
                    peerId: peerId
                }),
                success: function (response) {
                    // Xử lý kết quả thành công
                    console.log(response);
                },
                error: function (xhr, textStatus, errorThrown) {
                    // Xử lý lỗi
                    console.error(errorThrown);
                }
            });
        }
        function getPeerId(userId, callback) {
            $.ajax({
                url: '/api/Firebase/GetPeerId/' + userId,
                type: 'GET',
                success: function (response) {
                    callback(response);
                },
                error: function (xhr, status, error) {
                    console.error('Request failed. Status:', status);
                }
            });
        }


        // Hàm để thông báo cuộc gọi đến cho user có userId
        function notifyIncomingCall(userId, senderId) {
            connection.invoke("NotifyIncomingCall", userId, senderId).catch(err => console.error(err));
        }

        // Gửi tín hiệu close call từ user1 cho user2
        function closeCallToUser(userId) {
            console.log("Tat cuoc goi")
            connection.invoke("CloseCallToUser", userId).catch(err => console.error(err));
        }
    </script>
    <a class="scroll-to-top" href="">
        <i class="fa fa-chevron-up"></i>
    </a>
    <!-- Scroll To Top End Here -->

</div>
<h1></h1>
<div class="fabs" id="myChatBox">

    <!-- For demo purpose-->




    <div class="chat">
        <div class="chat_header">
            <div class="chat_option">
                <div class="header_img">
                    <img src="/AdminAssets/img/avatars/avatar.jpg" style="border-radius:5px; max-height:50px; max-width: 50px; margin-top:-5px" />
                </div>
                <span id="chat_head">@Model.Seller.UserName</span>
                <span id="chat_fullscreen_loader" class="chat_fullscreen_loader"><i class="fullscreen zmdi zmdi-window-maximize"></i></span>

            </div>

        </div>
        <div id="chat_fullscreen" class="chat_conversion chat_converse">
        </div>
        <div class="fab_field">
            <div id="imagePreviewContainer" style="display:none">
                <p>Bấm vào ảnh để bỏ chọn</p>
                <img onclick="removeImageSelected()" src="#" id="imagePreview" style="border-radius:5px; max-height:80px; max-width: 80px; margin-top:-5px;margin:10px; display:none" />
            </div>
            <a style="display: inline-block; position: relative; overflow: hidden; padding: 12px 4px; background-color: #f5f6f7; color: #4b4f56; border: 1px solid #ced0d4; border-radius: 4px; cursor: pointer;" id="callVideo" onclick="openModal(true)" class="videoCall"><i  class="fa fa-video-camera"></i></a>
            <label style="display: inline-block; position: relative; overflow: hidden; padding: 12px 4px; background-color: #f5f6f7; color: #4b4f56; border: 1px solid #ced0d4; border-radius: 4px; cursor: pointer;">
                <i  class="fa fa-file"></i>
                <input type="file" id="imageInput" accept="image/*" style="position: absolute; left: -9999px;">
            </label>
            <a id="fab_send" onclick="sendMessage()" class="fab"><i class="zmdi zmdi-mail-send"></i></a>
            <textarea id="messageChatInput" name="chat_message" placeholder="Send a message" class="chat_field chat_message"></textarea>
            
        </div>
    </div>
    <a id="prime" class="fab"><i class="prime zmdi zmdi-comment-outline"></i></a>
</div>
<div id="myModal" class="modal" style="display: none;">
    <!-- Nội dung modal -->
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>


        <div class="video-container">
            <video id="remoteVideo" autoplay playsinline class="remoteVideo"></video>
            <video id="localVideo" autoplay playsinline class="localVideo"></video>
            <button id="endCall" class="btn btn-danger" style="display:none" onclick="endCall(true)">Kết thúc cuộc gọi</button>
        </div>
    </div>
</div>